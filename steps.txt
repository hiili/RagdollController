Non-code steps (editor, config files, ...)


Init
----

Create a new project using your favorite template (Sun Temple at the moment)

Project settings:
   * Maps&modes: make sure that all three default/startup maps point to the main map
   * Input: add "console key = home"
   * Physics: set substepping on, max substep delta time = 0.004167 (240 Hz), max substeps = 4<br />
     (if changing this, make sure it is <0.02! See https://answers.unrealengine.com/questions/154604/addtorque-malfunctions-if-using-fixed-delta-time.html)

Create launch shortcuts:
   * debug modes
      * Development: Use the non-debug UE4Editor executable
      * DebugGame: Use the non-debug UE4Editor executable, add the -debug flag
      * Debug: Use the debug UE4Editor executable, add the -debug flag
   * launch modes
      * standalone: X:\GitHub\UnrealEngine\Engine\Binaries\Win64\UE4Editor.exe "X:\work\Unreal Projects\RagdollController45\RagdollController45.uproject" -game -log -UseFixedTimeStep
      * client: X:\GitHub\UnrealEngine\Engine\Binaries\Win64\UE4Editor.exe "X:\work\Unreal Projects\RagdollController45\RagdollController45.uproject" 127.0.0.1 -game -log -UseFixedTimeStep
      * server: X:\GitHub\UnrealEngine\Engine\Binaries\Win64\UE4Editor.exe "X:\work\Unreal Projects\RagdollController45\RagdollController45.uproject" -server -game -log -UseFixedTimeStep
      * listen server: X:\GitHub\UnrealEngine\Engine\Binaries\Win64\UE4Editor.exe "X:\work\Unreal Projects\RagdollController45\RagdollController45.uproject" main?listen -game -log -UseFixedTimeStep




Use fixed dt
------------

In your GameMode (create it if it does not yet exist, and make sure that all GameModes in config point to it):
   1 Set fixed dt in constructor: FApp::SetFixedDeltaTime( 1.f / 60.f )<br />
     (you use the command line option -UseFixedTimeStep to enable fixed time stepping!)

Set the framerate in Project Preferences ('desired framerate' might still affect something?)

(In MyGameMode::Tick(), implement manual fps capping (use code from UEngine::UpdateTimeAndHandleMaxTickRate()))

Double check that launch shortcuts have the -UseFixedTimeStep flag set


Create the ragdoll
------------------

Migrate from Content Examples: SkeletalMesh'/Game/ExampleContent/AnimationDemo/Meshes/Owen.Owen'

Create BP from Owen -> RagdollControl/OwenBP

Set Skeletal mesh component properties:
   * Simulate physics: on
   * Collision presets: PhysicsActor

Place him in the world, rename to Owen


Create a C++ access point
-------------------------

Create the ControlledRagdoll C++ class extending Actor, reparent OwenBP to it
   * reparenting does not become saved automatically, you need to save the asset directly in the BP editor

Re-enable ticking in the constructor: (needs a full restart)
	PrimaryActorTick.bCanEverTick = true;
	(//PrimaryActorTick.bStartWithTickEnabled = true;)
	(//PrimaryActorTick.bAllowTickOnDedicatedServer = true;)


Enable and access PhysX
-----------------------

Enable ragdoll physics on dedicated server. In PostInitializeComponents(), do:
   * this->SkeletalMeshComponent->bEnablePhysicsOnDedicatedServer = true;
   * this->SkeletalMeshComponent->SetSimulatePhysics( true );


RagdollController45.Build.cs, add PhysX to the following:
   * PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "PhysX" });
   * PublicIncludePaths.AddRange(new string[] { "Engine/Source/ThirdParty/PhysX/PhysX-3.3/include" });
(see https://answers.unrealengine.com/questions/70019/how-to-include-the-header-file-from-a-plugin.html)

Source files
   * #include <extensions/PxD6Joint.h>
      * this->SkeletalMeshComponent->Constraints[joint]->ConstraintData->getTwist() ...


Uncap dedicated server fps
--------------------------

UGameEngine::GetMaxTickRate() clamps NetServerMaxTickRate to [10,120], hard-coded.

Solution: Subclass from UGameEngine and override GetMaxTickRate()
   * Make the game use your class by adding this to DefaultEngine.ini: [/Script/Engine.Engine] ... GameEngine=/Script/YourModuleName.YourGameEngine
   * See https://wiki.unrealengine.com/Create_Custom_engine_classes_for_your_game_module

Notes
   * Rama's Blueprint library has functions for disabling and enabling rendering. check the performance with those?<br />
     If this works, then do we need a dedicated server approach anymore? Maybe for running on linux clusters, in case that we cannot launch a standalone game on linux without display?


Replication
-----------

Activate replication
   * Activate actor and movement replication for OwenBP via editor, tick "always relevant", "net update frequency" to 1000000000 so as to effectively disable it<br />
     (it depends on simulation time, not on wall clock time -> badly distorted if using a constant step size on a fast, uncapped server)
   * Crank up network speed limits: [/Script/Engine.Player] ConfiguredInternetSpeed, ConfiguredLanSpeed, [/Script/OnlineSubsystemUtils.IpNetDriver] MaxClientRate, MaxInternetClientRate, ... (only one was relevant, but which one?)
   * Implement AControlledRagdoll::GetLifetimeReplicatedProps() (call the DOREPLIFETIME macro for whatever you want to replicate, remember to call Super!)
      * #include "Net/UnrealNetwork.h"


Remote control
--------------

Add a Remote Control Interface actor to the scene.
   * Cannot find the class in the Class Viewer? You must ALWAYS start the editor via the shortcuts that contain the -debug flag properly!








Applying joint forces
---------------------

For testing
   * World Settings -> Override World Gravity = on (ie, gravity off)








----------




Appendix A: Fixed dt and fps capping in UE4.2
----------

...aaand -UseFixedTimeStep ruins the framerate capping! Thus, setting the frame rate in Project Config is of no use.
   * The bug is in UEngine::UpdateTimeAndHandleMaxTickRate(), where a fixed dt leads to a completely different execution path that does not contain any fps control code.
   * Subclassing from UEngine and overriding UpdateTimeAndHandleMaxTickRate() won't work, as this is not a virtual method. (checked in source, but not actually tested)
   * t.OverrideFPS console command could be used, except that it is not available in the non-debug version (packaged as 'shipping') (see UEngine::UpdateTimeAndHandleMaxTickRate())
   * Solution: cap the fps manually (this way you could also control the server's tick rate!)
      * In the level blueprint: nope, BP does not seem to have functions for suspending the entire engine for a moment (without doing a busy loop), nor functions to get wall clock time
        However: there actually are such functions, and Rama's Blueprint function library has also some! And you could expose custom c++ functions to your blueprints.
          Expose c++ functions to a regular BP: just extend the base class in c++ and add the proper UPROPERTY flags.
          Expose c++ functions to a level blueprint: extend the ALevelScriptActor class, see https://wiki.unrealengine.com/Solus_C%2B%2B_Tutorials
      * In MyGameMode.cpp: just copy the code from UEngine::UpdateTimeAndHandleMaxTickRate()




Appendix B: Step sizes and network configuration
----------

Step sizes and network configuration
   * We are using a constant step size in the game (you need to launch the game from one of the shortcuts)
   * Prepare for slow motion replays
      * Option 1:
         * Run the engine always at a short dt (eg, 1/120 or 1/240), which would permit directly slowing down stuff
         * Need to run the game on a server, and then have a client resample stuff for the actual on-screen fps
         * Pros
            * 'Native' high fps, slomo achievable without changing anything in the game (no risk of changed behavior)
            * Easy to switch between interactive (real-time) speed and max-speed (uncapped) simulation
              (the server can simply remove the fps cap whenever the client disconnects)
            * Client can run and render with dynamic fps, i.e., rendering speed is disconnected from the simulation speed
         * Cons
            * Complex, requires a client-server setup every time something needs to be run
            * Game logic runs unnecessarily often (you could add an 'on every nth' tick filter to your blueprints, though..)
            * Engine logic runs unnecessarily often (for a scene with just Owen (not sleeping) and no physics sub-stepping, engine logic time vs. physx time is around 90% - 10%!)
      * Option 2:
         * Run the engine at dt = 1/60 and render synchronously (locked fps), use physics sub-stepping for accuracy
         * Pros
            * Much simpler: no need for client-server hassle
         * Cons
            * Limited slomo (2x @ 30 fps), unless:
               * The dt is changed. Con: might change behavior, even if the dt change is countered in the physics sub-stepping iteration count.
               * You do some playback interpolation. Con: Perceived collision behavior becomes inaccurate, although this might not be a problem with modest resampling ratios around 1:2 or 1:4.
   * Game engine target fps: 
      * Max slow-motion factor depends on the engine fps
      * 120 fps -> 4x slow-motion @ 30 fps




Appendix C: Ragdoll pose replication
----------

This one seems tricky. Tried so far:

Actor: Blueprinted Owen, inherited from Actor.h. Owen as the root component, type SkeletalMeshComponent, physics enabled (tried also disabled and doing the auth switching below the other way around).

Construction script
   * On server, create a timer that fires the PullHeadUp function on every 2 seconds (adds vertical force to head)
   * On client, Set Simulate Physics of the Owen component: off (if doing the other way around, then need to also Wake Rigid Body the component)

Defaults:
   * Replication: on   (causes the actor to be replicated)
   * Replicate movement: on   (causes the root transform of the actor to be replicated)
      * With a listen server, this works fine: the root transform updates from the server to the client(s)<br />
        (while the ragdoll pose itself does not replicate. but the root movement causes jittering to the physics. to be expected..)
      * With a dedicated server, we get the following warning logged around four times a second or so,
        and the ragdoll gets a rather random-looking movement impulse on each error (no replication events of any kind seem to occur between the errors, the local ragdoll simulation just runs):<br />
        LogNet:Warning: FRepLayout::UpdateChangelistHistory: History overflow, forcing history dump Owen_C

Setting 'Set Is Replicated' of the Owen component to true in the construction script does not affect anything, regardless of whether client physics simulation of the Owen component is on or off.

Conclusion after much more experimenting:
   * SkeletalMeshComponent pose is not replicated by UE, you have to do it by yourself.
   * Current solution: do it on the PhysX level. Note that setting the global pose causes PhysX to ignore any velocities set during the same tick!
   * Replication seems tricky on UE level: there are no transform setters for the FBodyInstances. One path could be to do the pose replication via the animation system, replicate the velocities directly to PhysX, and use physics blending to merge these: PhysX would simulate the ragdoll based on the velocities while the animation system would constantly blend in absolute pose corrections -> we have smoothly blended client side prediction, plus more or less proper kinematic interaction with other simulated actors.
